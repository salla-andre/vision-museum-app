#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

reorder rootPrims = ["Root", "WoodPlank"]

def Xform "Root"
{
    reorder nameChildren = ["VaseGroup", "Cube", "BustGroup"]
    def Xform "BustGroup" (
        active = true
    )
    {
        reorder nameChildren = ["Cube", "Bust"]
        float3 xformOp:translate = (1, 0, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Bust" (
            active = true
            references = @Bust.usdz@
        )
        {
            reorder nameChildren = ["Materials", "Meshes", "RigidBody", "Collider"]
            float3 xformOp:scale = (0.003, 0.003, 0.003)
            float3 xformOp:translate = (0, 0.89, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "Cube" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/WoodPlank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.7000000000000001
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 0.75, 1)
            float3 xformOp:translate = (0, 0.25, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                prepend token outputs:surface.connect = </Root/BustGroup/Cube/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            token motionType = "Kinematic"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.7, 1.4265108, 0.7)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0.70075536, 0)
                }
            }
        }
    }

    def "WoodPlank" (
        active = true
        references = @WoodPlank.usdz@
    )
    {
        color3f inputs:Basecolor_Tint (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-56.812614, 67.17455)
                    float2 sizeInSubgraph = (160.5, 53)
                    int stackingOrderInSubgraph = 2352
                }
            }
        )
        float2 inputs:UV_Scale (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-725.2588, 351.55255)
                    float2 sizeInSubgraph = (138.5, 53)
                    int stackingOrderInSubgraph = 2272
                }
            }
        )
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        over "Dot"
        {
            float2 ui:nodegraph:node:size = (44, 18)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "PreviewSurface"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Mix"
        {
            float2 ui:nodegraph:node:size = (109, 145)
        }

        over "Swizzle"
        {
            float2 ui:nodegraph:node:size = (133.5, 40)
        }

        over "Swizzle_1"
        {
            float2 ui:nodegraph:node:size = (145.5, 53)
        }

        over "Multiply_1"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "BaseColor"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (158.5, 235)
        }
    }

    def Xform "VaseGroup" (
        active = true
    )
    {
        reorder nameChildren = ["Cylinder", "Vase", "vaso_placeholder", "Cylinder"]
        float3 xformOp:translate = (0, 0, -1.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "Cylinder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["DefaultMaterial", "RigidBody", "Collider", "WoodPlank"]
            uniform token axis = "Y"
            double height = 0.8
            rel material:binding = </Root/WoodPlank> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.4, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/VaseGroup/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (1, 1, 1)
                    float inputs:roughness = 0.75
                    token outputs:surface
                }
            }
        }

        def "Vase" (
            references = @vaso.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.001, 0.001, 0.001)
            float3 xformOp:translate = (0, 0.96, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Meshes"
            {
                over "Sketchfab_model"
                {
                    over "KGZ_5919_Waza_typu_hydria__OBJ_cleaner_gles"
                    {
                        over "Object_2"
                        {
                            over "Object_3"
                            {
                                over "Object_0"
                                {
                                }
                            }

                            over "Object_4"
                            {
                                over "Object_1"
                                {
                                }
                            }

                            over "Object_5"
                            {
                                over "Object_2"
                                {
                                }
                            }

                            over "Object_6"
                            {
                                over "Object_3"
                                {
                                }
                            }

                            over "Object_7"
                            {
                                over "Object_4"
                                {
                                }
                            }

                            over "Object_8"
                            {
                                over "Object_5"
                                {
                                }
                            }

                            over "Object_9"
                            {
                                over "Object_6"
                                {
                                }
                            }
                        }
                    }
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2289248, 1.099955, 0.20212466)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0.0005336702, 0.5499775, -0.0010623261)
                }
            }
        }

        def RealityKitComponent "RigidBody"
        {
            bool gravityEnabled = 0
            uniform token info:id = "RealityKit.RigidBody"
            token motionType = "Kinematic"

            def RealityKitStruct "massFrame"
            {
                def RealityKitStruct "m_pose"
                {
                }
            }

            def RealityKitStruct "material"
            {
            }
        }
    }
}

